Two questions in 45 mins

1. Sort an array of 0 and 1
2. print unique array element from both array.
3. find the loop in link list +1
4. topological sort
5. left view of tree
6. basic OS question on context switching 
7. SQL queries on join
8. Rain Water Harvesting
9. Binary Search Code
10. Second Maximum Element
11. Min Priority Queue Implementation
12. kth Maximum Element
13. SQL Query For Second Highest Salary in Employee Table Technical Round 
14. Index of Number "n" in Fibonacci Series
15. Spirally Traversing a Matrix
16. Given two nodes, tell if they are cousins or not
17. Invert binary tree give different approaches
18. Reverse a linked list   +2
19. Sort array containing 0,1,2
20. Find kth largest number
21. What is heap?
22. Y shape linked list question
23. Design Patterns
24. Exception handling
25. Create your own HashMap class
26. String manipulation programs
27. Explain the architecture of the last project you worked on.
28. Reverse linked list in k groups
29. Swap Linked list nodes pairwise
30. Find top 5 maximum marks from list of 1000 marks. (Hint : Heaps)
31. Splitwise simplify debts algorithm
32. Reactjs , CSS and HTML
33. Shortest path graph problem was asked with some variation
34. Puzzles
35. Remove consecutive duplicate chars from a string array  (I/P - abbcddefgh O/P - acefgh)
36. Write an optimised solution for finding prime number.
37. All possible combinations for a string "ABC"
38. Find max index where the sum of first n integers is equal to last (length-n) integers in a unsorted array
39. Array and Ovject flatten code. Not to use ES6 features (Frontend)
40. Words reverse of sentence
41. Polyfill of currying. First 2 inputs only, later N no of inputs situation
42. Slider of image animation hand written code.
43. JSON parse/stringify +/- points
44. Difference between Event Handler and eventDelegation
45. Increase progress of web page
46. Different load balancer routing algorithms implementation using nginx
47. Hoisting (Frontend)
48. ES6 features
49. Linux commands
50. Difference between Map() and forEach()?
51. Create functionality of map() using pure Javascript
52. How do you write code for UDP communication
53. Longest common subsequence of vowel between 2 strings ex: str1 = abcytehi, str2 = avceyyui common subsequence of vowels = aei, lcs = 3
54. Reverse string with spaces, in place. If string is a palindrome, append and prepend $ ex: str1 = zebra bat ball, reversed : arbez tab llab str2 = aba, reversed = $aba$
55. Spiral Tree Traversal : solved using 2 stacks but he asked to solve again using recursion
56. nth node from the last of linked list : space and time optimized, brute force was not accepted
57. Kth highest number in an array : space and time optimized, brute force was not accepted
58. Quick Sort vs Heap Sort vs Merge Sort : Space - Time complexity differences
59. Traverse a tree and maintain array which contains nodeâ€™s data and depth for each node.
60. HTTP error code
61. Question on implementing autocomplete.
62. How to find middle element of the linked List
63. How to find circular loop in a linked list
64. How autocomplete feature can be implemented. The main focus was on data structure which can be used to store the autocomplete suggestions.
65. Implement LRU
66. How design of Airport
67. Design Payment Gateway
68. Design Hotel Management
69. Design a system like BookMyShow
70. What are different caching mechanism and how & why would you use them?
71. How does Node.js able to take multiple requests from client asynchronously even when it is single threaded.
72. How the db durability is ensured?
73. What is ACID?
74. What is load-balancer and how & why will you use?
75. Given a sequence, find the length of the longest palindromic subsequence in it?
76. About React, Angular, Bootstrap?
77. What are Promise? Give Example
78. What is React? React Virtualisation?
79. HashMaps and BST? Identify space and time complexity.
80. How do you improve the performance in apps?
81. Check linked list is palindrome of not
82. Dependency Inversion Principle
83. Reverse string words with offset
84. Count frequency of element in array
85. OOPS
86. Why array, Linked List, Tree and graph? (pro and cons for each).
87. Level order traversal, Zigzag traversal. ( asked for the code)
88. A deep discussion on merge sort and quick sort (based on the RAM size and the input size, which one is best etc).
89. Given inorder and pre-order of a binary tree , construct the tree
90. Minimum jump to reach end of the array.
91. A simple dp question
92. Find The largest Substring in a String.
93. Write Promise pollyfill code in javascript infront of him that too on paper.
95. Implement Stack using 2 arrays
96. Implement Hash Tables with Double Hashing
97. Merge 2 sorted arrays
98. LRU Design LRU with TTL design

HTML
1. Meta tags?
2. Svg/canvas
3. Progressive web apps
4. Doctype
5. CSS selectors, specificity and which are faster over others?
6. Display positioning
7. Bootstrap grid system and loader

JS
1. Function hoisting
2. Prototypes
3. Closure
4. How to achieve method chaining?
5. console.log( "10" + 20 + 30 )? ===> 102030
6. console.log( "10" + ( 20 + 30 ) )? ===> 1050
7. Typescript generators
8. 

Angular
1. Digest cycle?
2. Dirty checking vs plain checking?
3. Broadcast vs emit?
4. Virtual dom algorithm
5. $sce and angular security?
6. Directives- binding strategies in detail
7. Input form validations- write on paper with pen?
8. Config and run blocks
9. Providers, service vs factory
10. How will You do DOM manipulation in Angular
11. 